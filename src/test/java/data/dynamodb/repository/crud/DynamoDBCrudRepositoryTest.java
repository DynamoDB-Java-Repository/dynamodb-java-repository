package data.dynamodb.repository.crud;

import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.local.main.ServerRunner;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import data.dynamodb.repository.common.exception.DynamoDBItemMustNotBeNullException;
import data.dynamodb.repository.common.exception.DynamoDBMapperConfigMustNotBeNullException;
import data.dynamodb.repository.common.exception.IdMustNotBeNullException;
import data.dynamodb.repository.common.pagination.Pageable;
import data.dynamodb.repository.crud.input.model.DynamoTestModel;
import data.dynamodb.repository.crud.input.repository.DynamoTestRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import java.util.Arrays;


@Slf4j
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DynamoDBCrudRepositoryTest {

    private DynamoTestRepository dynamoTestRepository;
    private AmazonDynamoDB amazonDynamoDB;

    @BeforeAll
    void setUp() throws Exception {
        var dynamoDBProxyServer = ServerRunner.createServerFromCommandLineArgs(
                new String[]{"-inMemory"}
        );
        dynamoDBProxyServer.start();
        createAmazonDynamoDBClient();


        dynamoTestRepository = new DynamoTestRepository(new DynamoDBMapper(amazonDynamoDB));
    }

    @BeforeEach
    void setUpTable() {
        createTables();
    }

    @AfterEach
    void cleanUpTable() {
        deleteTable();
    }

    private void createAmazonDynamoDBClient() {
        this.amazonDynamoDB = AmazonDynamoDBClientBuilder.standard()
                .withEndpointConfiguration(
                        new AwsClientBuilder.EndpointConfiguration("http://localhost:8000", "us-west-2"))

                .build();
    }

    private void createTables() {
        var mapper = new DynamoDBMapper(this.amazonDynamoDB);
        var tableRequest = mapper.generateCreateTableRequest(DynamoTestModel.class);
        tableRequest.setProvisionedThroughput(new ProvisionedThroughput(1L, 1L));
        amazonDynamoDB.createTable(tableRequest);

    }

    private void deleteTable() {
        var mapper = new DynamoDBMapper(this.amazonDynamoDB);
        var tableRequest = mapper.generateDeleteTableRequest(DynamoTestModel.class);
        amazonDynamoDB.deleteTable(tableRequest);
    }

    @Test
    void givenSave_WhenItemIsPresentAndHasAutoGeneratedId_ThenShouldFinishWithoutErrorsReturningAnItemWithItsIdFilled() {
        var item = dynamoTestRepository.save(DynamoTestModel.builder().value("TEST").build());

        Assertions.assertNotNull(item);
        Assertions.assertNotNull(item.getId());

        var queryResult = dynamoTestRepository.findById(item.getId());

        Assertions.assertNotNull(queryResult);
        Assertions.assertNotNull(queryResult.getId());

    }


    @Test
    void givenSave_WhenItemIsNull_ThenShouldThrowDynamoDBItemMustNotBeNullException() {
        Assertions.assertThrows(DynamoDBItemMustNotBeNullException.class, () -> dynamoTestRepository.save(null));
    }

    @Test
    void givenSaveWithConfigs_WhenItemAndConfigIsPresentAndHasAutoGeneratedId_ThenShouldFinishWithoutErrorsReturningAnItemWithItsIdFilled() {

        DynamoDBMapperConfig saveBehaviour = new DynamoDBMapperConfig.Builder()
                .withConsistentReads(DynamoDBMapperConfig.ConsistentReads.CONSISTENT)
                .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE)
                .build();

        var item = dynamoTestRepository.save(DynamoTestModel.builder().value("TEST").build(), saveBehaviour);

        Assertions.assertNotNull(item);
        Assertions.assertNotNull(item.getId());

        var queryResult = dynamoTestRepository.findById(item.getId());

        Assertions.assertNotNull(queryResult);
        Assertions.assertNotNull(queryResult.getId());

    }

    @Test
    void givenSaveWithConfigs_WhenItemOrConfigIsNull_ThenShouldFinishWithAnException() {
        DynamoDBMapperConfig saveBehaviour = new DynamoDBMapperConfig.Builder()
                .withConsistentReads(DynamoDBMapperConfig.ConsistentReads.CONSISTENT)
                .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE)
                .build();

        var test = DynamoTestModel.builder().value("TEST").build();

        Assertions.assertThrows(DynamoDBItemMustNotBeNullException.class, () -> dynamoTestRepository.save(null, saveBehaviour));
        Assertions.assertThrows(DynamoDBMapperConfigMustNotBeNullException.class, () -> dynamoTestRepository.save(test, null));
        Assertions.assertThrows(DynamoDBItemMustNotBeNullException.class, () -> dynamoTestRepository.save(null, null));
    }


    @Test
    void givenSaveOrUpdate_WhenItemIsPresentAndHasAutoGeneratedId_ThenShouldFinishWithoutErrorsReturningAnItemWithItsIdFilled() {
        var item = dynamoTestRepository.saveOrUpdate(DynamoTestModel.builder().value("TEST").build());

        Assertions.assertNotNull(item);
        Assertions.assertNotNull(item.getId());
        Assertions.assertEquals("TEST", item.getValue());

        item.setValue("TEST 1");
        var updated = dynamoTestRepository.saveOrUpdate(item);

        Assertions.assertNotNull(updated);
        Assertions.assertNotNull(updated.getId());
        Assertions.assertEquals("TEST 1", updated.getValue());

    }


    @Test
    void givenSaveOrUpdate_WhenItemIsNull_ThenShouldThrowExceptionDynamoDBItemMustNotBeNullException() {
        Assertions.assertThrows(DynamoDBItemMustNotBeNullException.class, () -> dynamoTestRepository.saveOrUpdate(null));
    }

    @Test
    void givenSaveAll_WhenItemBatchIsPresentAndTheresNoNullValue_ThenShouldSaveAll() {

        var result = dynamoTestRepository.saveAll(Arrays.asList(
                DynamoTestModel.builder().value("TEST").build(),
                DynamoTestModel.builder().value("TEST 1").build(),
                DynamoTestModel.builder().value("TEST 2").build(),
                DynamoTestModel.builder().value("TEST 3").build(),
                DynamoTestModel.builder().value("TEST 4").build()
        ));

        result.forEach(item -> Assertions.assertNotNull(item.getId()));

        Assertions.assertEquals(5, result.size());

    }

    @Test
    void givenFindById_WhenIdIsPresentAndItemExists_ThenShouldReturnThatItem() {

        // Populating db.
        dynamoTestRepository.saveAll(Arrays.asList(
                DynamoTestModel.builder().id("1").value("TEST").build(),
                DynamoTestModel.builder().id("2").value("2TEST").build(),
                DynamoTestModel.builder().id("3").value("3TEST").build(),
                DynamoTestModel.builder().id("4").value("4TEST").build(),
                DynamoTestModel.builder().id("5").value("5TEST").build(),
                DynamoTestModel.builder().id("6").value("6TEST").build()

        ));

        var result = dynamoTestRepository.findById("5");

        Assertions.assertNotNull(result);
        Assertions.assertEquals("5", result.getId());

        var result2 = dynamoTestRepository.findById("6");

        Assertions.assertNotNull(result2);
        Assertions.assertEquals("6", result2.getId());

    }

    @Test
    void givenFindById_WhenIdIsPresentAndItemDoesNotExists_ThenShouldReturnNullValue() {

        var result = dynamoTestRepository.findById("5");
        Assertions.assertNull(result);

    }

    @Test
    void givenFindById_WhenIdIsNotPresent_ThenShouldThrowIdMustNotBeNullException() {
        Assertions.assertThrows(IdMustNotBeNullException.class, () -> dynamoTestRepository.findById(null));
    }

    @Test
    void givenFindAllPaginated_WhenTheresData_ThenShouldReturnRespectingPagination() {

        // Populating db.
        dynamoTestRepository.saveAll(Arrays.asList(
                DynamoTestModel.builder().id("1").value("TEST").build(),
                DynamoTestModel.builder().id("2").value("2TEST").build(),
                DynamoTestModel.builder().id("3").value("3TEST").build(),
                DynamoTestModel.builder().id("4").value("4TEST").build()

        ));

        var pageable = new Pageable();
        pageable.setPageSize(1);
        var result = dynamoTestRepository.findAll(pageable);

        Assertions.assertEquals(1, result.getContent().size());
        Assertions.assertNotNull(result.getLastEvaluatedItem());

        pageable.setStartKey(result.getLastEvaluatedItem());

        result = dynamoTestRepository.findAll(pageable);

        Assertions.assertEquals(1, result.getContent().size());
        Assertions.assertNotNull(result.getLastEvaluatedItem());
        pageable.setStartKey(result.getLastEvaluatedItem());

        result = dynamoTestRepository.findAll(pageable);

        Assertions.assertEquals(1, result.getContent().size());
        Assertions.assertNotNull(result.getLastEvaluatedItem());
        pageable.setStartKey(result.getLastEvaluatedItem());

        result = dynamoTestRepository.findAll(pageable);
        Assertions.assertEquals(1, result.getContent().size());
        Assertions.assertNotNull(result.getLastEvaluatedItem());
        pageable.setStartKey(result.getLastEvaluatedItem());


        result = dynamoTestRepository.findAll(pageable);
        Assertions.assertEquals(0, result.getContent().size());
        Assertions.assertNull(result.getLastEvaluatedItem());

    }

    @Test
    void givenFindAll_WhenTheresData_ThenShouldReturnAllItemsOnTheTable() throws InterruptedException {

        var t1 = new Thread(() -> {
            for (Integer i = 0; i < 20_000; i++) {
                dynamoTestRepository.save(DynamoTestModel.builder().id(i.toString()).value("TEST" + i.toString()).build());
            }
        });

        var t3 = new Thread(() -> {
            for (Integer i = 20_000; i < 40_000; i++) {
                dynamoTestRepository.save(DynamoTestModel.builder().id(i.toString()).value("TEST" + i.toString()).build());
            }
        });

        var t5 = new Thread(() -> {
            for (Integer i = 40_000; i < 60_000; i++) {
                dynamoTestRepository.save(DynamoTestModel.builder().id(i.toString()).value("TEST" + i.toString()).build());
            }

        });

        t1.start();
        t3.start();
        t5.start();

        t1.join();
        t3.join();
        t5.join();


        var result = dynamoTestRepository.findAll();

        Assertions.assertEquals(60_000, result.size());

    }

    @Test
    void givenDelete_WhenIdIsPresentAndItemExists_ThenShouldRemoveIt() throws InterruptedException {
        dynamoTestRepository.save(DynamoTestModel.builder().id("1").value("TEST").build());
        dynamoTestRepository.save(DynamoTestModel.builder().id("2").value("TES2").build());


        dynamoTestRepository.delete("2");

        var result = dynamoTestRepository.findAll();

        Assertions.assertEquals(1, result.size());
        Assertions.assertEquals("TEST", result.get(0).getValue());

    }


}
