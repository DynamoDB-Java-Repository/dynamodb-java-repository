package data.dynamodb.repository.crud;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.ScanResultPage;
import com.google.common.reflect.TypeToken;
import data.dynamodb.repository.common.exception.DynamoDBItemMustNotBeNullException;
import data.dynamodb.repository.common.exception.DynamoDBMapperConfigMustNotBeNullException;
import data.dynamodb.repository.common.exception.IdMustNotBeNullException;
import data.dynamodb.repository.common.pagination.Page;
import data.dynamodb.repository.common.pagination.Pageable;

import java.util.ArrayList;
import java.util.List;

@SuppressWarnings({"unchecked", "java:S119"})
public class DynamoDBCrudRepository<T, ID> {

    private final DynamoDBMapper dynamoDBMapper;
    private final Class<T> typeClass;

    public DynamoDBCrudRepository(DynamoDBMapper dynamoDBMapper) {
        this.dynamoDBMapper = dynamoDBMapper;

        TypeToken<T> type = new TypeToken<T>(getClass()) {
        };
        this.typeClass = (Class<T>) type.getRawType();
    }

    /**
     * This method saves a new Item. Not recommended for updating an item, even tough it's possible.
     * <p>
     *
     * @param item to be saved.
     * @return item with the partition key filled if you annoted this field with @{@link com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey} and @{@link com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey}, else, its on you to provide a Key.
     */
    public T save(T item) {
        validateBeforeSave(item);
        dynamoDBMapper.save(item);
        return item;
    }

    /**
     * This saves an item. It accepts a DynamoDBMapperConfig, which can be used to configure the save behavior of this method.
     * <p>
     *
     * @param item   To be saved.
     * @param config Configuration of this save.
     * @return item with the partition key filled if you annoted this field with @{@link com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey} and @{@link com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey}, else, its on you to provide a Key.
     */
    public T save(T item, DynamoDBMapperConfig config) {
        validateBeforeSave(item, config);
        dynamoDBMapper.save(item, config);
        return item;
    }

    /**
     * This method utilizes a DynamoDB save behavior which looks first if the item already exists on the database
     * and then inserts if not or updates if yes.
     * <p>
     * <p>
     * The Lookup is consistent, so it read all items on DynamoDB.
     * <p>
     *
     * @param item to be saved or updated.
     * @return item with the partition key filled if you annoted this field with @{@link com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey} and @{@link com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey}, else, its on you to provide a Key.
     */
    public T saveOrUpdate(T item) {
        validateBeforeSave(item);

        DynamoDBMapperConfig saveBehaviour = new DynamoDBMapperConfig.Builder()
                .withConsistentReads(DynamoDBMapperConfig.ConsistentReads.CONSISTENT)
                .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE)
                .build();

        return save(item, saveBehaviour);
    }

    public List<T> saveAll(List<T> items) {
        dynamoDBMapper.batchSave(items);
        return items;
    }

    /**
     * Returns an object with the given hash key, or null if no such item exists.
     *
     * @param id The partition Key Id.
     */
    public T findById(ID id) {
        validateId(id);

        return dynamoDBMapper.load(typeClass, id);
    }

    /**
     * Scans through an Amazon DynamoDB table and returns a single page of matching results based on the scanExpression.
     *
     * @param scanExpression The expression to be used. Must be not null.
     */
    public ScanResultPage<T> scanBy(DynamoDBScanExpression scanExpression) {
        return dynamoDBMapper.scanPage(typeClass, scanExpression);
    }

    /**
     * Scans through an Amazon DynamoDB table and returns a single page containing all items on the table. Use it wisely.
     */
    public List<T> findAll() {
        var scanResult = scanBy(new DynamoDBScanExpression());

        List<T> items = new ArrayList<>(scanResult.getResults());

        while (scanResult.getLastEvaluatedKey() != null) {
            scanResult = scanBy(new DynamoDBScanExpression().withExclusiveStartKey(scanResult.getLastEvaluatedKey()));
            items.addAll(scanResult.getResults());
        }

        return items;
    }

    /**
     * Scans through an Amazon DynamoDB table and returns a single page of matching results based on the scanExpression.
     *
     * @param pageable The Pageable item containing the page size and the key pointing to the next page.
     *                 If pageSize is null it will be ignored and DynamoDB will scan up to 1MB per page.
     *                 If startKey is null or empty it will be ignored and the first page will be queried.
     */
    public Page<T> findAll(Pageable pageable) {
        var scanExpression = new DynamoDBScanExpression();

        if (pageable != null && pageable.getStartKey() != null && !pageable.getStartKey().isEmpty())
            scanExpression.withExclusiveStartKey(pageable.getStartKey());

        if (pageable != null && pageable.getPageSize() != null)
            scanExpression.withLimit(pageable.getPageSize());

        var result = scanBy(scanExpression);

        return Page.<T>builder()
                .content(result.getResults())
                .lastEvaluatedItem(result.getLastEvaluatedKey())
                .build();
    }

    public void delete(ID id) {
        validateId(id);
        dynamoDBMapper.delete(findById(id));
    }

    private void validateBeforeSave(T item, DynamoDBMapperConfig config) {
        validateBeforeSave(item);

        if (config == null)
            throw new DynamoDBMapperConfigMustNotBeNullException();
    }

    private void validateBeforeSave(T item) {
        if (item == null)
            throw new DynamoDBItemMustNotBeNullException();
    }

    private void validateId(ID id) {
        if (id == null)
            throw new IdMustNotBeNullException();
    }

}
